swagger: '2.0'
info:
  title: ${model.title}
  description: ${model.description}
  version: "${model.version}"
<% if (hasProperty('host')) { %>
host: ${host}
<% } else { %>
host: please.change.com
<% } %>
schemes:
    - http
    - https
<% if (hasProperty('basePath')) { %>
basePath: ${basePath}
<% } else { %>
basePath: /v${model.version}
<% } %>
produces:
  - application/json
paths:
<% model.types.findAll { return ! isInnerType.call(it) }.each { type -> %>
    /${toLowerCase.call(type.name)}:
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}:
    <% type.refOwner.each { refOwner1 -> %>
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}/${toLowerCase.call(refOwner1.name)}
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}/${toLowerCase.call(refOwner1.name)}/{${toLowerCase.call(refOwner1.name)}_id}
        <% refOwner1.refOwner.each { refOwner2 -> %>
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}/${toLowerCase.call(refOwner1.name)}/{${toLowerCase.call(refOwner1.name)}_id}/${toLowerCase.call(refOwner2.name)}
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}/${toLowerCase.call(refOwner1.name)}/{${toLowerCase.call(refOwner1.name)}_id}/${toLowerCase.call(refOwner2.name)}/{${toLowerCase.call(refOwner2.name)}_id}
            <% refOwner2.refOwner.each { refOwner3 -> %>
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}/${toLowerCase.call(refOwner1.name)}/{${toLowerCase.call(refOwner1.name)}_id}/${toLowerCase.call(refOwner2.name)}/${toLowerCase.call(refOwner3.name)}
    /${toLowerCase.call(type.name)}/{${toLowerCase.call(type.name)}_id}/${toLowerCase.call(refOwner1.name)}/{${toLowerCase.call(refOwner1.name)}_id}/${toLowerCase.call(refOwner2.name)}/${toLowerCase.call(refOwner3.name)}/{${toLowerCase.call(refOwner3.name)}_id}
            <% } %>
        <% } %>
    <% } %>
<% } %>
definitions:
<% model.types.each { type -> %>
  ${firstUpperCase.call(type.name)}:
    type: object
    properties:
    <% type.properties.each { prop -> %>
      ${prop.name}:
        <% if (prop.type.isArray) { %>
        type: array
        items:
            <% if ((prop.isRefTypeOrComplexType())) { %>
          ${DOLLAR}ref: '#/definitions/${prop.type.type.name}'
            <% } else { %>
                <% if (prop.description) { %>
          description: ${prop.description}
                <% } %>
          type: ${typeToSwagger.call(prop.type)}
                <% if (typeFormatToSwagger.call(prop.type)) { %>
          format: ${typeFormatToSwagger.call(prop.type)}
                <% } %>
            <% } %>
        <% } else { %>
            <% if (prop.isRefTypeOrComplexType()) { %>
        ${DOLLAR}ref: '#/definitions/${prop.type.type.name}'
            <% } else { %>
                <% if (prop.description) { %>
        description: ${prop.description}
                <% } %>
        type: ${typeToSwagger.call(prop.type)}
                <% if (typeFormatToSwagger.call(prop.type)) { %>
        format: ${typeFormatToSwagger.call(prop.type)}
                <% } %>
            <% } %>
        <% } %>
    <% } %>
<% } %>
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

