<%
    def getParameterStr = { List typeList,boolean isIdPath ->
        if ((!typeList) || ((typeList.size()==1) && (!isIdPath))) return ''
        def parameterStr=''
        typeList.findAll {
            isIdPath || (it != typeList[typeList.size()-1])
        }.each {
            def descriptionStr = it.description ? it.description : '???'
            parameterStr += "\n        - name: ${it.name.toLowerCase()}_id"
            parameterStr += '\n          in: path'
            parameterStr += "\n          description: $descriptionStr"
            parameterStr += '\n          required: true'
            parameterStr += '\n          type: integer'
            parameterStr += '\n          format: int64'
        }
        def ret = """      parameters:
${parameterStr}
"""
        return ret
    }

    /**
     * prints out tags section
     */
    def printTags = { type ->
        return """      tags:
        - ${type.name}"""
    }

    /**
     * prints out response section for ID-Paths
     */
    def printIdResponse = { type ->
        return """      responses:
        200:
          description: in case of success
          schema:
            ${DOLLAR}ref: '#/definitions/${type.name}'
        default:
          description: Unexpected error
          schema:
            ${DOLLAR}ref: '#/definitions/Error'"""
    }


    /**
     * prints out response section for List-Paths
     */
    def printListResponse = { type ->
        return """      responses:
        200:
          description: in case of success
          schema:
            type: array
            items:
              ${DOLLAR}ref: '#/definitions/${type.name}'
        default:
          description: Unexpected error
          schema:
            ${DOLLAR}ref: '#/definitions/Error'"""
    }

    // If you declare a closure you can use it inside the template
    /**
     * Print path for List URLs
     */
    def printIDPath = { List typeList ->
        def pathStr=''
        typeList.each {
                pathStr += '/'
                pathStr += toLowerCase.call(it.name)
                pathStr += "/{${toLowerCase.call(it.name)}_id}"
        }
        def lastItem = typeList[typeList.size()-1]
        def summary = lastItem.description ? lastItem.description : '???'
        def parameterStr = getParameterStr(typeList,true)
    return """
  ${pathStr}:
    get:
      summary: ${summary}
      description: returns object by id
${parameterStr}
${printTags(lastItem)}
${printIdResponse(lastItem)}
"""
    }

    /**
     * Print path for List URLs
     */
    def printListPath = { List typeList ->
        def pathStr=''
        def lastElem = typeList[typeList.size()-1]
        typeList.each {
                pathStr += '/'
                pathStr += toLowerCase.call(it.name)
                if (it!=lastElem) {
                    pathStr += "/{${toLowerCase.call(it.name)}_id}"
                }
        }
        def lastItem = typeList[typeList.size()-1]
        def summary = lastItem.description ? lastItem.description : '???'
        def parameterStr = getParameterStr(typeList,false)
        def ret = """
  ${pathStr}:
    get:
      summary: ${summary}
      description: returns object list
${parameterStr}
${printTags(lastItem)}
${printListResponse(lastItem)}
"""
        return ret
    }
%>
# generated with jsonCodeGen
swagger: '2.0'
info:
  title: ${model.title}
  description: ${model.description}
  version: "${model.version}"
<% if (extraParam.host) { %>
host: ${extraParam.host}
<% } else { %>
host: please.change.com
<% } %>
schemes:
    - http
    - https
<% if (extraParam.basePath) { %>
    <% if (extraParam.appendVersionToPath) { %>
basePath: ${extraParam.basePath}/v${model.version}
    <% } else { %>
basePath: ${extraParam.basePath}
    <% } %>
<% } else { %>
basePath: /v${model.version}
<% } %>
produces:
  - application/json
<% if (extraParam.extraProduces) { %>
    <% extraParam.extraProduces.split(',').each { %>
  - ${it.trim()}
    <% } %>
<% } %>

paths:
<% model.types.findAll { return ! isInnerType.call(it) }.each { type -> %>
  ${printListPath([type])}
  ${printIDPath([type])}
    <% type.refOwner.each { refOwner1 -> %>
  ${printListPath([type,refOwner1])}
  ${printIDPath([type,refOwner1])}
        <% refOwner1.refOwner.each { refOwner2 -> %>
  ${printListPath([type,refOwner1,refOwner2])}
  ${printIDPath([type,refOwner1,refOwner2])}
            <% refOwner2.refOwner.each { refOwner3 -> %>
  ${printListPath([type,refOwner1,refOwner2,refOwner3])}
  ${printIDPath([type,refOwner1,refOwner2,refOwner3])}
            <% } %>
        <% } %>
    <% } %>
<% } %>
definitions:
<% model.types.each { type -> %>
  ${firstUpperCase.call(type.name)}:
    type: object
    properties:
    <% type.properties.each { prop -> %>
      ${prop.name}:
        <% if (prop.type.isArray) { %>
        type: array
        items:
            <% if ((prop.isRefTypeOrComplexType())) { %>
          ${DOLLAR}ref: '#/definitions/${prop.type.type.name}'
            <% } else { %>
                <% if (prop.description) { %>
          description: ${prop.description}
                <% } %>
          type: ${typeToSwagger.call(prop.type)}
                <% if (typeFormatToSwagger.call(prop.type)) { %>
          format: ${typeFormatToSwagger.call(prop.type)}
                <% } %>
            <% } %>
        <% } else { %>
            <% if (prop.isRefTypeOrComplexType()) { %>
        ${DOLLAR}ref: '#/definitions/${prop.type.type.name}'
            <% } else { %>
                <% if (prop.description) { %>
        description: ${prop.description}
                <% } %>
        type: ${typeToSwagger.call(prop.type)}
                <% if (typeFormatToSwagger.call(prop.type)) { %>
        format: ${typeFormatToSwagger.call(prop.type)}
                <% } %>
            <% } %>
        <% } %>
    <% } %>
<% } %>
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string