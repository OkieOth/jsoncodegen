<%
def memberVisibility = extraParam.memberVisibility && extraParam.memberVisibility.toLowerCase()=='protected' ? 'protected' : 'private'
%>package ${extraParam.packageName};

<% if ( currentType.description ) { %>
/**
 * ${currentType.description}
 */
<% } %>
public class ${ upperCamelCase.call(currentType.name) } {
    <% currentType.properties.each { prop -> %>
    <% if (prop.description) { %>
    /**
     * ${prop.description}
     */
    <% } %>
    ${memberVisibility} ${ typeToJava.call(prop.type) } ${prop.name};

    public ${ typeToJava.call(prop.type) } get${ firstUpperCase.call(prop.name) } () { return this.${prop.name}; }

    public void set${ firstUpperCase.call(prop.name) } (${ typeToJava.call(prop.type) } ${prop.name}) {
        this.${prop.name} = ${prop.name};
    }

    <% } %>

    @Override
    public boolean equals(Object obj) {
        if (obj==null) return false;
        if ( ! (obj instanceof ${ upperCamelCase.call(currentType.name) })) return false;

        ${ upperCamelCase.call(currentType.name) } _typeInst = (${ upperCamelCase.call(currentType.name) }) obj;
    <% currentType.properties.each { prop -> %>
        ${ typeToJava.call(prop.type) } _${prop.name} = _typeInst.get${ firstUpperCase.call(prop.name) } ();
        if (this.${prop.name} == null && _${prop.name} != null) return false;
        if (this.${prop.name} != null) {
            if (!this.${prop.name}.equals(_${prop.name})) return false;
        }
    <% } %>
        return true;
    }

}